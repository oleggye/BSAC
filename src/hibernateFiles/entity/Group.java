package hibernateFiles.entity;
// Generated May 15, 2017 12:08:05 PM by Hibernate Tools 4.3.1

import java.util.HashSet;
import java.util.Set;

import components.IName;

/**
 * Group generated by hbm2java
 */
public class Group implements java.io.Serializable, Cloneable, IName {

	private static final long serialVersionUID = 1L;

	private Short idGroup;
	private Faculty faculty;
	private Flow flow;
	private String nameGroup;
	private byte eduLevel;
	private Set<?> records = new HashSet<Object>(0);

	public Group() {
	}

	public Group(Faculty faculty, String nameGroup, byte eduLevel) {
		this.faculty = faculty;
		this.nameGroup = nameGroup;
		this.eduLevel = eduLevel;
	}

	public Group(Faculty faculty, Flow flow, String nameGroup, byte eduLevel, Set<?> records) {
		this.faculty = faculty;
		this.flow = flow;
		this.nameGroup = nameGroup;
		this.eduLevel = eduLevel;
		this.records = records;
	}

	public Short getIdGroup() {
		return this.idGroup;
	}

	public void setIdGroup(Short idGroup) {
		this.idGroup = idGroup;
	}

	public Faculty getFaculty() {
		return this.faculty;
	}

	public void setFaculty(Faculty faculty) {
		this.faculty = faculty;
	}

	public Flow getFlow() {
		return this.flow;
	}

	public void setFlow(Flow flow) {
		this.flow = flow;
	}

	public String getNameGroup() {
		return this.nameGroup;
	}

	public void setNameGroup(String nameGroup) {
		this.nameGroup = nameGroup;
	}

	public byte getEduLevel() {
		return this.eduLevel;
	}

	public void setEduLevel(byte eduLevel) {
		this.eduLevel = eduLevel;
	}

	public Set<?> getRecords() {
		return this.records;
	}

	public void setRecords(Set<?> records) {
		this.records = records;
	}

	@Override
	public String getName() {
		return this.getNameGroup();
	}

	@Override
	public String toString() {
		return "Group [idGroup=" + idGroup + ", faculty=" + faculty + ", flow=" + flow + ", nameGroup=" + nameGroup
				+ ", eduLevel=" + eduLevel + "]";
	}

	// TODO: it's almost deep copy beside record set
	@Override
	protected Object clone() throws CloneNotSupportedException {
		Group result = (Group) super.clone();
		result.faculty = (Faculty) faculty.clone();
		if (flow != null) {
			result.flow = (Flow) flow.clone();
		}
		return result;
	}
}